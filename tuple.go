// this file was generated by "go generate" please do not edit
package types

type Tuple2[T1, T2 any] struct{	
	Value1 T1
	Value2 T2
}

func (t *Tuple2[T1, T2]) Deconstruct() (T1, T2){
	return t.Value1, t.Value2
}

func NewTuple2[T1, T2 any](t1 T1, t2 T2) Tuple2[T1, T2]{
	return Tuple2[T1, T2]{
		Value1: t1, 
		Value2: t2, 
	}
}

type Tuple3[T1, T2, T3 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
}

func (t *Tuple3[T1, T2, T3]) Deconstruct() (T1, T2, T3){
	return t.Value1, t.Value2, t.Value3
}

func NewTuple3[T1, T2, T3 any](t1 T1, t2 T2, t3 T3) Tuple3[T1, T2, T3]{
	return Tuple3[T1, T2, T3]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
	}
}

type Tuple4[T1, T2, T3, T4 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
}

func (t *Tuple4[T1, T2, T3, T4]) Deconstruct() (T1, T2, T3, T4){
	return t.Value1, t.Value2, t.Value3, t.Value4
}

func NewTuple4[T1, T2, T3, T4 any](t1 T1, t2 T2, t3 T3, t4 T4) Tuple4[T1, T2, T3, T4]{
	return Tuple4[T1, T2, T3, T4]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
	}
}

type Tuple5[T1, T2, T3, T4, T5 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
}

func (t *Tuple5[T1, T2, T3, T4, T5]) Deconstruct() (T1, T2, T3, T4, T5){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5
}

func NewTuple5[T1, T2, T3, T4, T5 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) Tuple5[T1, T2, T3, T4, T5]{
	return Tuple5[T1, T2, T3, T4, T5]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
	}
}

type Tuple6[T1, T2, T3, T4, T5, T6 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
}

func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Deconstruct() (T1, T2, T3, T4, T5, T6){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6
}

func NewTuple6[T1, T2, T3, T4, T5, T6 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) Tuple6[T1, T2, T3, T4, T5, T6]{
	return Tuple6[T1, T2, T3, T4, T5, T6]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
	}
}

type Tuple7[T1, T2, T3, T4, T5, T6, T7 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
}

func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7
}

func NewTuple7[T1, T2, T3, T4, T5, T6, T7 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) Tuple7[T1, T2, T3, T4, T5, T6, T7]{
	return Tuple7[T1, T2, T3, T4, T5, T6, T7]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
	}
}

type Tuple8[T1, T2, T3, T4, T5, T6, T7, T8 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
}

func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8
}

func NewTuple8[T1, T2, T3, T4, T5, T6, T7, T8 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]{
	return Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
	}
}

type Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
}

func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9
}

func NewTuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]{
	return Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
	}
}

type Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
}

func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10
}

func NewTuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10) Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]{
	return Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
	}
}

type Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
}

func (t *Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11
}

func NewTuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11) Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]{
	return Tuple11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
	}
}

type Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
	Value12 T12
}

func (t *Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11, t.Value12
}

func NewTuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12) Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]{
	return Tuple12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
		Value12: t12, 
	}
}

type Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
	Value12 T12
	Value13 T13
}

func (t *Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11, t.Value12, t.Value13
}

func NewTuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13) Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]{
	return Tuple13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
		Value12: t12, 
		Value13: t13, 
	}
}

type Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
	Value12 T12
	Value13 T13
	Value14 T14
}

func (t *Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11, t.Value12, t.Value13, t.Value14
}

func NewTuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14) Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]{
	return Tuple14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
		Value12: t12, 
		Value13: t13, 
		Value14: t14, 
	}
}

type Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
	Value12 T12
	Value13 T13
	Value14 T14
	Value15 T15
}

func (t *Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11, t.Value12, t.Value13, t.Value14, t.Value15
}

func NewTuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15) Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]{
	return Tuple15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
		Value12: t12, 
		Value13: t13, 
		Value14: t14, 
		Value15: t15, 
	}
}

type Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any] struct{	
	Value1 T1
	Value2 T2
	Value3 T3
	Value4 T4
	Value5 T5
	Value6 T6
	Value7 T7
	Value8 T8
	Value9 T9
	Value10 T10
	Value11 T11
	Value12 T12
	Value13 T13
	Value14 T14
	Value15 T15
	Value16 T16
}

func (t *Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]) Deconstruct() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16){
	return t.Value1, t.Value2, t.Value3, t.Value4, t.Value5, t.Value6, t.Value7, t.Value8, t.Value9, t.Value10, t.Value11, t.Value12, t.Value13, t.Value14, t.Value15, t.Value16
}

func NewTuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10, t11 T11, t12 T12, t13 T13, t14 T14, t15 T15, t16 T16) Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]{
	return Tuple16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]{
		Value1: t1, 
		Value2: t2, 
		Value3: t3, 
		Value4: t4, 
		Value5: t5, 
		Value6: t6, 
		Value7: t7, 
		Value8: t8, 
		Value9: t9, 
		Value10: t10, 
		Value11: t11, 
		Value12: t12, 
		Value13: t13, 
		Value14: t14, 
		Value15: t15, 
		Value16: t16, 
	}
}
